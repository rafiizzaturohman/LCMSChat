datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  LECTURER
  STUDENT
}

enum ResourceType {
  FILE
  VIDEO
  LINK
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  name          String
  password      String
  role          Role
  avatarUrl     String?
  ownedCourses  Course[]        @relation("CourseOwner")
  enrollments   Enrollment[]
  messages      Message[]
  attendance    Attendance[]
  submissions   Submission[]
  CourseGrades  CourseGrades[]
  gradedSubmissions Submission[] @relation("Grader")

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Course {
  id            Int             @id @default(autoincrement())
  title         String
  description   String?
  semester      String?         // Optional semester tracking
  owner         User            @relation("CourseOwner", fields: [ownerId], references: [id])
  ownerId       Int
  enrollments   Enrollment[]
  messages      Message[]
  courseGrades  CourseGrades[]
  gradingPolicy GradingPolicy?
  attendances   Attendance[]
  assignments   Assignment[]
  resources     Resource[]
  schedules     Schedule[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?       // Soft delete
}

model CourseGrades {
  id           Int      @id @default(autoincrement())
  student      User     @relation(fields: [studentId], references: [id])
  studentId    Int
  course       Course   @relation(fields: [courseId], references: [id])
  courseId     Int
  totalGrade   Float?
  letterGrade  String?  // A, B, C, D
  status       String?  // PASSED / FAILED
  updatedAt    DateTime @updatedAt

  @@unique([studentId, courseId])
}

model Enrollment {
  id         Int       @id @default(autoincrement())
  student    User      @relation(fields: [studentId], references: [id])
  studentId  Int
  course     Course    @relation(fields: [courseId], references: [id])
  courseId   Int
  createdAt  DateTime  @default(now())

  @@unique([studentId, courseId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
}

model Attendance {
  id         Int      @id @default(autoincrement())
  student    User     @relation(fields: [studentId], references: [id])
  studentId  Int
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  date       DateTime
  present    Boolean  @default(false)

  @@unique([studentId, courseId, date])
}

model Assignment {
  id            Int           @id @default(autoincrement())
  title         String
  description   String?
  startAt       DateTime
  dueAt         DateTime
  course        Course        @relation(fields: [courseId], references: [id])
  courseId      Int
  submissions   Submission[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
}

model Submission {
  id            Int           @id @default(autoincrement())
  content       String
  fileUrl       String?       // Optional: file upload support
  feedback      String?
  submittedAt   DateTime      @default(now())
  student       User          @relation(fields: [studentId], references: [id])
  studentId     Int
  assignment    Assignment    @relation(fields: [assignmentId], references: [id])
  assignmentId  Int
  grade         Float?
  gradedBy      User?         @relation("Grader", fields: [gradedById], references: [id])
  gradedById    Int?

  @@unique([studentId, assignmentId])
}

model Resource {
  id          Int       @id @default(autoincrement())
  title       String
  type        ResourceType
  url         String
  uploadedAt  DateTime  @default(now())
  course      Course    @relation(fields: [courseId], references: [id])
  courseId    Int
  deletedAt   DateTime?
}

model Schedule {
  id          Int       @id @default(autoincrement())
  course      Course    @relation(fields: [courseId], references: [id])
  courseId    Int
  day         Weekday
  startTime   DateTime
  endTime     DateTime
  topic       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GradingPolicy {
  id          Int      @id @default(autoincrement())
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    Int      @unique
  title       String?
  description String?
  gradeA      Float
  gradeB      Float
  gradeC      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
